import 'package:flutter/material.dart';import 'package:flutter/rendering.dart';import 'package:weather_app/constants.dart';class SegmentedControl extends StatefulWidget {  SegmentedControl({    @required this.titles,    this.cornerRadius,    this.segmentPadding,    this.backgroundColor,    this.selectedColor,    this.onChanged,  });  final List<String> titles;  final BorderRadius cornerRadius;  final EdgeInsetsGeometry segmentPadding;  final Color backgroundColor;  final Color selectedColor;  final Function(int index) onChanged;  @override  State<StatefulWidget> createState() => _SegmentedControl();}class _SegmentedControl extends State<SegmentedControl> {  var selectedIndex = 0;  var keys = <int, GlobalKey>{};  var segmentedControlKey = GlobalKey();  var positionX = 0.0;  @override  Widget build(BuildContext context) {    return Container(      key: segmentedControlKey,      clipBehavior: Clip.hardEdge,      decoration: BoxDecoration(borderRadius: widget.cornerRadius),      child: Stack(        alignment: Alignment.center,        children: <Widget>[          Positioned.fill(child: Container(color: widget.backgroundColor)),          AnimatedPositioned(            child: Container(              child: Padding(                padding: widget.segmentPadding,                child: Text(widget.titles[selectedIndex], style: kAftikaWhite16),              ),              decoration: BoxDecoration(color: widget.selectedColor, borderRadius: widget.cornerRadius),            ),            duration: Duration(milliseconds: 100),            curve: Curves.ease,            left: positionX,          ),          Row(mainAxisSize: MainAxisSize.min, children: createSegments()),        ],      ),    );  }  List<Widget> createSegments() {    List<Widget> segments = <Widget>[];    for (var index = 0; index < widget.titles.length; index++) {      keys[index] = GlobalKey();      segments.add(        GestureDetector(          key: keys[index],          behavior: HitTestBehavior.opaque,          child: Padding(            padding: widget.segmentPadding,            child: Text(widget.titles[index], style: kAftikaBlack16),          ),          onTap: () {            setState(() {              setSelectedSegment(index);            });            widget.onChanged(index);          },        ),      );    }    return segments;  }  void setSelectedSegment(int index) {    selectedIndex = index;    BuildContext current = keys[index].currentContext;    RenderBox box = current.findRenderObject();    positionX = box.localToGlobal(Offset.zero).dx - getSegmentedControlPosition().dx;  }  Offset getSegmentedControlPosition() {    BuildContext current = segmentedControlKey.currentContext;    RenderBox box = current.findRenderObject();    return box.localToGlobal(Offset.zero);  }}